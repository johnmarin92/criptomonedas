{"version":3,"sources":["cryptomonedas.png","components/Error.js","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["MensajeError","styled","p","Error","mensaje","Label","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","codigo","nombre","useCriptomoneda","CoinInfo","Name","FullName","Id","Boton","input","Formulario","guardarCriptomoneda","guardarMoneda","listacripto","guardarCriptomonedas","error","guardarError","moneda","SelectMonedas","criptomoneda","SelectCripto","useEffect","a","axios","get","resultado","data","Data","cosultarAPI","onSubmit","preventDefault","type","Resultado","div","Info","Precio","Cotizacion","Object","keys","length","console","log","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Contenedor","Imagen","img","Heading","h1","App","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptmoneda","componente","src","imagen","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62193c1e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cryptomonedas.51f1d2ed.png\";","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport Proptypes from 'prop-types';\r\n\r\nconst MensajeError = styled.p`\r\n    background-color: #b7322c;\r\n    padding: 1rem;\r\n    color: #FFF;\r\n    font-size: 30px;\r\n    text-transform: uppercase;\r\n    font-weight: center;\r\n    text-align: center;\r\n    font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <MensajeError>{mensaje}</MensajeError>\r\n     );\r\n}\r\n\r\n Error.propTypes = {\r\n     mensaje: Proptypes.string.isRequired\r\n }\r\n    \r\n \r\nexport default Error;","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\n\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;    \r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`\r\n\r\nconst useMoneda = (label, stateInicial, opciones) => {\r\n\r\n    // State de nuestro custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n  \r\n    const Seleccionar = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={ e => actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">- Seleccione -</option>\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    );\r\n\r\n    // Retornar state, interfaz y func que modifica el state\r\n    return [state, Seleccionar, actualizarState];\r\n}       \r\n \r\nexport default useMoneda;\r\n","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\n\r\n\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;    \r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`\r\n\r\nconst useCriptomoneda = (label, stateInicial, opciones) => {\r\n\r\n    //console.log(opciones);\r\n\r\n    // State de nuestro custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n    \r\n    const SelectCripto = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={ e => actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">- Seleccione -</option>\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    );\r\n\r\n    // Retornar state, interfaz y func que modifica el state\r\n    return [state, SelectCripto , actualizarState];\r\n}       \r\n \r\nexport default useCriptomoneda;\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport Error from './Error';\r\nimport useMoneda from '../hooks/useMoneda';\r\nimport useCriptomoneda from '../hooks/useCriptomoneda';\r\nimport axios from 'axios';\r\nimport Proptypes from 'prop-types'\r\n\r\n\r\nconst Boton = styled.input`\r\n    margin-top: 20px;\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding: 10px;\r\n    background-color: #66a2fe;\r\n    border: none;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n    color: #FFF;\r\n    transition: background-color .3s ease;\r\n\r\n    &:hover {\r\n        background-color: #326AC0;\r\n        cursor: pointer;\r\n    }\r\n\r\n`\r\n\r\nconst  Formulario = ({ guardarCriptomoneda, guardarMoneda}) => {\r\n\r\n    // state del listado de criptomonedas\r\n    const [ listacripto, guardarCriptomonedas ] = useState([])\r\n    const [ error, guardarError ] = useState(false);\r\n\r\n\r\n    const MONEDAS = [\r\n        {codigo: 'USD', nombre: 'Dolar de Estados Unidos'},\r\n        {codigo: 'MXN', nombre: 'Peso Mexicano'},\r\n        {codigo: 'EUR', nombre: 'Euro'},\r\n        {codigo: 'GBP', nombre: 'Libra Esterlina'},\r\n    ]\r\n    \r\n    // Utilizar useMoneda\r\n    const [ moneda, SelectMonedas ] = useMoneda('Elige tu Moneda', '',MONEDAS);\r\n\r\n    // utilizar useCriptomoneda\r\n    const [criptomoneda, SelectCripto] = useCriptomoneda('Elige tu Criptomoneda', '', listacripto);\r\n    \r\n    // ejecutar llamado a la API\r\n    useEffect(() => {\r\n        const cosultarAPI = async () => {\r\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\r\n\r\n            const resultado = await axios.get(url);\r\n            guardarCriptomonedas(resultado.data.Data);\r\n        }\r\n        cosultarAPI();\r\n    }, [])\r\n    \r\n    // cuando el usuario hace submit\r\n    const cotizarMoneda = e => {\r\n        e.preventDefault();\r\n\r\n        // validar  si ambos campos estan llenos\r\n        if(moneda === '' || criptomoneda === '') {\r\n            guardarError(true);\r\n            return;\r\n        }\r\n\r\n        // pasar los datos al componente principal \r\n        guardarError(false);\r\n        guardarMoneda(moneda);\r\n        guardarCriptomoneda(criptomoneda);\r\n    }\r\n    \r\n    return ( \r\n        <form\r\n            onSubmit={cotizarMoneda} \r\n        >\r\n            {error ? <Error mensaje=\"Todos los campos son obligatorios\" /> : null}\r\n            \r\n            <SelectMonedas />\r\n\r\n            <SelectCripto  />\r\n            \r\n            <Boton\r\n\r\n            type=\"submit\"\r\n            value=\"calcular\"\r\n            />\r\n            </form>\r\n\r\n     );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    guardarMoneda: Proptypes.func.isRequired,\r\n    guardarCriptomoneda: Proptypes.func.isRequired\r\n}\r\n\r\nexport default Formulario ;;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport Proptypes from 'prop-types';\r\n\r\nconst Resultado = styled.div`\r\n    color: #FFF;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n`;\r\n\r\nconst Info = styled.p`\r\n    font-size: 18px;\r\n\r\n    span {\r\n        font-weight: bold;\r\n    }\r\n`;\r\nconst Precio = styled.p`\r\n    font-size: 30px;\r\n\r\n    span {\r\n        font-weight:bold;\r\n    }\r\n`\r\n\r\nconst Cotizacion = ({resultado}) => {\r\n  if(Object.keys(resultado).length === 0) return null;\r\n\r\n    console.log(resultado)\r\n    \r\n    return ( \r\n    <Resultado>\r\n        <Precio>El precio es: <span>{resultado.PRICE}</span></Precio >\r\n        <Info>Precio mas alto del dia: <span>{resultado.HIGHDAY}</span></Info>\r\n        <Info>Precio mas bajo del dia : <span>{resultado.LOWDAY}</span></Info>\r\n        <Info>Variacion ultimas 24 horas: <span>{resultado.CHANGEPCT24HOUR}</span></Info>\r\n        <Info>Ultima Actualizacion: <span>{resultado.LASTUPDATE}</span></Info>\r\n    </Resultado>\r\n    );\r\n}\r\n\r\nCotizacion.propTypes = {\r\n    resultado: Proptypes.object.isRequired\r\n}\r\n \r\nexport default Cotizacion;","import React from 'react';\r\nimport './Spinner.css'\r\n\r\n\r\nconst Spinner = () => {\r\n    return (  \r\n        <div class=\"sk-chase\">\r\n  <div class=\"sk-chase-dot\"></div>\r\n  <div class=\"sk-chase-dot\"></div>\r\n  <div class=\"sk-chase-dot\"></div>\r\n  <div class=\"sk-chase-dot\"></div>\r\n  <div class=\"sk-chase-dot\"></div>\r\n  <div class=\"sk-chase-dot\"></div>\r\n</div>\r\n    );\r\n}\r\n\r\n \r\nexport default Spinner;","import React , { useState, useEffect  }from 'react';\nimport styled from '@emotion/styled';\nimport axios from 'axios';\nimport imagen from './cryptomonedas.png';\nimport Formulario from './components/Formulario';\nimport Cotizacion from './components/Cotizacion';\nimport Spinner from './components/Spinner';\n\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width:992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n font-family: 'Bebas Neue', cursive;\n  color: #FFF;\n  text-align:left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66A2FE;\n    display:block;\n  }\n`;\n\n\nfunction App() {\n\n  const [moneda, guardarMoneda] = useState('');\n  const [criptomoneda, guardarCriptomoneda] = useState('');\n  const [resultado,  guardarResultado] = useState({}); \n  const [cargando, guardarCargando] = useState(false);\n  \n  useEffect( () => {\n\n    const cotizarCriptmoneda = async () => {\n        // evitamos la ejecución la primera vez\n        if(moneda === '') return;\n\n        // consultar la api para obtener la cotizacion\n        \n        const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n\n        const resultado = await axios.get(url);\n\n        // mostrar el spinner\n        guardarCargando(true);\n\n        // ocultar el spinner y mostrar el resultado\n        setTimeout(()=> {\n\n        // cambiar el estado de cargando\n        guardarCargando(false);\n        \n        \n         // guardar cotizacion\n        guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n\n        }, 3000);\n        \n       }\n    cotizarCriptmoneda();\n  }, [moneda, criptomoneda]);\n\n  // Mostrar spinner o resultado\n  const componente = (cargando) ? <Spinner /> : <Cotizacion resultado={resultado}/>\n\n\n  return (\n   <Contenedor>\n     <div>\n      <Imagen \n      src={imagen}\n      alt=\"imagen cripto\"\n     />\n     </div>\n     <div>\n        <Heading>Cotiza Criptomonedas al instante </Heading>\n\n        <Formulario \n          guardarMoneda={guardarMoneda}\n          guardarCriptomoneda={guardarCriptomoneda}\n        />\n     \n      {componente}\n     \n     \n     </div>\n   </Contenedor>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"," import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}